/* tslint:disable */
/* eslint-disable */
/*
Qualtrics Survey API

The Qualtrics Survey endpoints give you access to the structure of the surveys you create. 

Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints. 

Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BlockDefinition } from '../models';
// @ts-ignore
import { BlockElementsInner } from '../models';
// @ts-ignore
import { BlockOptions } from '../models';
// @ts-ignore
import { CreateBlockResponse } from '../models';
// @ts-ignore
import { ForbiddenRequestErrorResponse } from '../models';
// @ts-ignore
import { GetBlockResponse } from '../models';
// @ts-ignore
import { InternalServerErrorResponse } from '../models';
// @ts-ignore
import { InvalidRequestErrorResponse } from '../models';
// @ts-ignore
import { LibraryID } from '../models';
// @ts-ignore
import { NotFoundErrorResponse } from '../models';
// @ts-ignore
import { RequestSuccessfulResponse } from '../models';
// @ts-ignore
import { UnauthorizedRequestErrorResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SurveyBlocksApi - axios parameter creator
 * @export
 */
export const SurveyBlocksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/).
         * @summary Create Block
         * @param {string} surveyId 
         * @param {BlockDefinition} [blockDefinition] Create block request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBlock: async (surveyId: string, blockDefinition?: BlockDefinition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('createNewBlock', 'surveyId', surveyId)
            const localVarPath = `/survey-definitions/{surveyId}/blocks`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: blockDefinition,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/blocks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(blockDefinition, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) definition.
         * @summary Get Block
         * @param {string} surveyId 
         * @param {string} blockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionBlock: async (surveyId: string, blockId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('getDefinitionBlock', 'surveyId', surveyId)
            // verify required parameter 'blockId' is not null or undefined
            assertParamExists('getDefinitionBlock', 'blockId', blockId)
            const localVarPath = `/survey-definitions/{surveyId}/blocks/{blockId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"blockId"}}`, encodeURIComponent(String(blockId !== undefined ? blockId : `-blockId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/blocks/{blockId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) from the survey.
         * @summary Delete Block
         * @param {string} surveyId 
         * @param {string} blockId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBlock: async (surveyId: string, blockId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('removeBlock', 'surveyId', surveyId)
            // verify required parameter 'blockId' is not null or undefined
            assertParamExists('removeBlock', 'blockId', blockId)
            const localVarPath = `/survey-definitions/{surveyId}/blocks/{blockId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"blockId"}}`, encodeURIComponent(String(blockId !== undefined ? blockId : `-blockId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/blocks/{blockId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) definition.
         * @summary Update Block
         * @param {string} surveyId 
         * @param {string} blockId 
         * @param {BlockDefinition} [blockDefinition] Update block request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinitionBlock: async (surveyId: string, blockId: string, blockDefinition?: BlockDefinition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('updateDefinitionBlock', 'surveyId', surveyId)
            // verify required parameter 'blockId' is not null or undefined
            assertParamExists('updateDefinitionBlock', 'blockId', blockId)
            const localVarPath = `/survey-definitions/{surveyId}/blocks/{blockId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"blockId"}}`, encodeURIComponent(String(blockId !== undefined ? blockId : `-blockId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: blockDefinition,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/blocks/{blockId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(blockDefinition, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SurveyBlocksApi - functional programming interface
 * @export
 */
export const SurveyBlocksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SurveyBlocksApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/).
         * @summary Create Block
         * @param {SurveyBlocksApiCreateNewBlockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewBlock(requestParameters: SurveyBlocksApiCreateNewBlockRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBlockResponse>> {
            const blockDefinition: BlockDefinition = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewBlock(requestParameters.surveyId, blockDefinition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) definition.
         * @summary Get Block
         * @param {SurveyBlocksApiGetDefinitionBlockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefinitionBlock(requestParameters: SurveyBlocksApiGetDefinitionBlockRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetBlockResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefinitionBlock(requestParameters.surveyId, requestParameters.blockId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) from the survey.
         * @summary Delete Block
         * @param {SurveyBlocksApiRemoveBlockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBlock(requestParameters: SurveyBlocksApiRemoveBlockRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestSuccessfulResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBlock(requestParameters.surveyId, requestParameters.blockId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) definition.
         * @summary Update Block
         * @param {SurveyBlocksApiUpdateDefinitionBlockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDefinitionBlock(requestParameters: SurveyBlocksApiUpdateDefinitionBlockRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestSuccessfulResponse>> {
            const blockDefinition: BlockDefinition = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDefinitionBlock(requestParameters.surveyId, requestParameters.blockId, blockDefinition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SurveyBlocksApi - factory interface
 * @export
 */
export const SurveyBlocksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SurveyBlocksApiFp(configuration)
    return {
        /**
         * Create a new [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/).
         * @summary Create Block
         * @param {SurveyBlocksApiCreateNewBlockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewBlock(requestParameters: SurveyBlocksApiCreateNewBlockRequest, options?: AxiosRequestConfig): AxiosPromise<CreateBlockResponse> {
            return localVarFp.createNewBlock(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) definition.
         * @summary Get Block
         * @param {SurveyBlocksApiGetDefinitionBlockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinitionBlock(requestParameters: SurveyBlocksApiGetDefinitionBlockRequest, options?: AxiosRequestConfig): AxiosPromise<GetBlockResponse> {
            return localVarFp.getDefinitionBlock(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) from the survey.
         * @summary Delete Block
         * @param {SurveyBlocksApiRemoveBlockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBlock(requestParameters: SurveyBlocksApiRemoveBlockRequest, options?: AxiosRequestConfig): AxiosPromise<RequestSuccessfulResponse> {
            return localVarFp.removeBlock(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) definition.
         * @summary Update Block
         * @param {SurveyBlocksApiUpdateDefinitionBlockRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinitionBlock(requestParameters: SurveyBlocksApiUpdateDefinitionBlockRequest, options?: AxiosRequestConfig): AxiosPromise<RequestSuccessfulResponse> {
            return localVarFp.updateDefinitionBlock(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewBlock operation in SurveyBlocksApi.
 * @export
 * @interface SurveyBlocksApiCreateNewBlockRequest
 */
export type SurveyBlocksApiCreateNewBlockRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyBlocksApiCreateNewBlock
    */
    readonly surveyId: string
    
} & BlockDefinition

/**
 * Request parameters for getDefinitionBlock operation in SurveyBlocksApi.
 * @export
 * @interface SurveyBlocksApiGetDefinitionBlockRequest
 */
export type SurveyBlocksApiGetDefinitionBlockRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyBlocksApiGetDefinitionBlock
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyBlocksApiGetDefinitionBlock
    */
    readonly blockId: string
    
}

/**
 * Request parameters for removeBlock operation in SurveyBlocksApi.
 * @export
 * @interface SurveyBlocksApiRemoveBlockRequest
 */
export type SurveyBlocksApiRemoveBlockRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyBlocksApiRemoveBlock
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyBlocksApiRemoveBlock
    */
    readonly blockId: string
    
}

/**
 * Request parameters for updateDefinitionBlock operation in SurveyBlocksApi.
 * @export
 * @interface SurveyBlocksApiUpdateDefinitionBlockRequest
 */
export type SurveyBlocksApiUpdateDefinitionBlockRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyBlocksApiUpdateDefinitionBlock
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyBlocksApiUpdateDefinitionBlock
    */
    readonly blockId: string
    
} & BlockDefinition

/**
 * SurveyBlocksApiGenerated - object-oriented interface
 * @export
 * @class SurveyBlocksApiGenerated
 * @extends {BaseAPI}
 */
export class SurveyBlocksApiGenerated extends BaseAPI {
    /**
     * Create a new [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/).
     * @summary Create Block
     * @param {SurveyBlocksApiCreateNewBlockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyBlocksApiGenerated
     */
    public createNewBlock(requestParameters: SurveyBlocksApiCreateNewBlockRequest, options?: AxiosRequestConfig) {
        return SurveyBlocksApiFp(this.configuration).createNewBlock(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) definition.
     * @summary Get Block
     * @param {SurveyBlocksApiGetDefinitionBlockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyBlocksApiGenerated
     */
    public getDefinitionBlock(requestParameters: SurveyBlocksApiGetDefinitionBlockRequest, options?: AxiosRequestConfig) {
        return SurveyBlocksApiFp(this.configuration).getDefinitionBlock(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) from the survey.
     * @summary Delete Block
     * @param {SurveyBlocksApiRemoveBlockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyBlocksApiGenerated
     */
    public removeBlock(requestParameters: SurveyBlocksApiRemoveBlockRequest, options?: AxiosRequestConfig) {
        return SurveyBlocksApiFp(this.configuration).removeBlock(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a [block](https://www.qualtrics.com/support/survey-platform/survey-module/block-options/block-options-overview/) definition.
     * @summary Update Block
     * @param {SurveyBlocksApiUpdateDefinitionBlockRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyBlocksApiGenerated
     */
    public updateDefinitionBlock(requestParameters: SurveyBlocksApiUpdateDefinitionBlockRequest, options?: AxiosRequestConfig) {
        return SurveyBlocksApiFp(this.configuration).updateDefinitionBlock(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
