/* tslint:disable */
/* eslint-disable */
/*
Qualtrics Survey API

The Qualtrics Survey endpoints give you access to the structure of the surveys you create. 

Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints. 

Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateSurveyRequest } from '../models';
// @ts-ignore
import { CreateSurveyResponse } from '../models';
// @ts-ignore
import { DeleteSurveyResponse } from '../models';
// @ts-ignore
import { ForbiddenRequestErrorResponse } from '../models';
// @ts-ignore
import { GetSurveyResponse } from '../models';
// @ts-ignore
import { InternalServerErrorResponse } from '../models';
// @ts-ignore
import { InvalidRequestErrorResponse } from '../models';
// @ts-ignore
import { LanguageCode } from '../models';
// @ts-ignore
import { MetadataResponse } from '../models';
// @ts-ignore
import { NotFoundErrorResponse } from '../models';
// @ts-ignore
import { ProjectCategory } from '../models';
// @ts-ignore
import { RequestSuccessfulResponse } from '../models';
// @ts-ignore
import { SurveyMetadata } from '../models';
// @ts-ignore
import { SurveyStatusPutMetadata } from '../models';
// @ts-ignore
import { UnauthorizedRequestErrorResponse } from '../models';
// @ts-ignore
import { UpdateMetadataRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SurveysApi - axios parameter creator
 * @export
 */
export const SurveysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction).
         * @summary Create Survey
         * @param {CreateSurveyRequest} [createSurveyRequest] Create or import a survey request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefinition: async (createSurveyRequest?: CreateSurveyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/survey-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createSurveyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createSurveyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction#survey-definition-api-tenets) definition or a specified survey format.
         * @summary Get Survey
         * @param {string} surveyId 
         * @param {'qsf'} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinition: async (surveyId: string, format?: 'qsf', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('getDefinition', 'surveyId', surveyId)
            const localVarPath = `/survey-definitions/{surveyId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction) metadata.
         * @summary Get Survey Metadata
         * @param {string} surveyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata: async (surveyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('getMetadata', 'surveyId', surveyId)
            const localVarPath = `/survey-definitions/{surveyId}/metadata`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/metadata',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction).
         * @summary Delete Survey
         * @param {string} surveyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDefinition: async (surveyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('removeDefinition', 'surveyId', surveyId)
            const localVarPath = `/survey-definitions/{surveyId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction) metadata.  <!-- theme: warning --> >### Date fields in this API use MySQL DateTime instead of ISO-8601.
         * @summary Update Metadata
         * @param {string} surveyId 
         * @param {UpdateMetadataRequest} [updateMetadataRequest] Update metadata request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetadata: async (surveyId: string, updateMetadataRequest?: UpdateMetadataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('updateMetadata', 'surveyId', surveyId)
            const localVarPath = `/survey-definitions/{surveyId}/metadata`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateMetadataRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/metadata',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateMetadataRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SurveysApi - functional programming interface
 * @export
 */
export const SurveysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SurveysApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction).
         * @summary Create Survey
         * @param {SurveysApiCreateDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDefinition(requestParameters: SurveysApiCreateDefinitionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSurveyResponse>> {
            const createSurveyRequest: CreateSurveyRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDefinition(createSurveyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve the [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction#survey-definition-api-tenets) definition or a specified survey format.
         * @summary Get Survey
         * @param {SurveysApiGetDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefinition(requestParameters: SurveysApiGetDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSurveyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefinition(requestParameters.surveyId, requestParameters.format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction) metadata.
         * @summary Get Survey Metadata
         * @param {SurveysApiGetMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMetadata(requestParameters: SurveysApiGetMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetadataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetadata(requestParameters.surveyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction).
         * @summary Delete Survey
         * @param {SurveysApiRemoveDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeDefinition(requestParameters: SurveysApiRemoveDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteSurveyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeDefinition(requestParameters.surveyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction) metadata.  <!-- theme: warning --> >### Date fields in this API use MySQL DateTime instead of ISO-8601.
         * @summary Update Metadata
         * @param {SurveysApiUpdateMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMetadata(requestParameters: SurveysApiUpdateMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestSuccessfulResponse>> {
            const updateMetadataRequest: UpdateMetadataRequest = {
                SurveyName: requestParameters.SurveyName,
                SurveyDescription: requestParameters.SurveyDescription,
                SurveyStatus: requestParameters.SurveyStatus,
                SurveyStartDate: requestParameters.SurveyStartDate,
                SurveyExpirationDate: requestParameters.SurveyExpirationDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMetadata(requestParameters.surveyId, updateMetadataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SurveysApi - factory interface
 * @export
 */
export const SurveysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SurveysApiFp(configuration)
    return {
        /**
         * Create a new [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction).
         * @summary Create Survey
         * @param {SurveysApiCreateDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDefinition(requestParameters: SurveysApiCreateDefinitionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<CreateSurveyResponse> {
            return localVarFp.createDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction#survey-definition-api-tenets) definition or a specified survey format.
         * @summary Get Survey
         * @param {SurveysApiGetDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinition(requestParameters: SurveysApiGetDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<GetSurveyResponse> {
            return localVarFp.getDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction) metadata.
         * @summary Get Survey Metadata
         * @param {SurveysApiGetMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMetadata(requestParameters: SurveysApiGetMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<MetadataResponse> {
            return localVarFp.getMetadata(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction).
         * @summary Delete Survey
         * @param {SurveysApiRemoveDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDefinition(requestParameters: SurveysApiRemoveDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<DeleteSurveyResponse> {
            return localVarFp.removeDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction) metadata.  <!-- theme: warning --> >### Date fields in this API use MySQL DateTime instead of ISO-8601.
         * @summary Update Metadata
         * @param {SurveysApiUpdateMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMetadata(requestParameters: SurveysApiUpdateMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<RequestSuccessfulResponse> {
            return localVarFp.updateMetadata(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDefinition operation in SurveysApi.
 * @export
 * @interface SurveysApiCreateDefinitionRequest
 */
export type SurveysApiCreateDefinitionRequest = {
    
} & CreateSurveyRequest

/**
 * Request parameters for getDefinition operation in SurveysApi.
 * @export
 * @interface SurveysApiGetDefinitionRequest
 */
export type SurveysApiGetDefinitionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveysApiGetDefinition
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {'qsf'}
    * @memberof SurveysApiGetDefinition
    */
    readonly format?: 'qsf'
    
}

/**
 * Request parameters for getMetadata operation in SurveysApi.
 * @export
 * @interface SurveysApiGetMetadataRequest
 */
export type SurveysApiGetMetadataRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveysApiGetMetadata
    */
    readonly surveyId: string
    
}

/**
 * Request parameters for removeDefinition operation in SurveysApi.
 * @export
 * @interface SurveysApiRemoveDefinitionRequest
 */
export type SurveysApiRemoveDefinitionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveysApiRemoveDefinition
    */
    readonly surveyId: string
    
}

/**
 * Request parameters for updateMetadata operation in SurveysApi.
 * @export
 * @interface SurveysApiUpdateMetadataRequest
 */
export type SurveysApiUpdateMetadataRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveysApiUpdateMetadata
    */
    readonly surveyId: string
    
} & UpdateMetadataRequest

/**
 * SurveysApiGenerated - object-oriented interface
 * @export
 * @class SurveysApiGenerated
 * @extends {BaseAPI}
 */
export class SurveysApiGenerated extends BaseAPI {
    /**
     * Create a new [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction).
     * @summary Create Survey
     * @param {SurveysApiCreateDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveysApiGenerated
     */
    public createDefinition(requestParameters: SurveysApiCreateDefinitionRequest = {}, options?: AxiosRequestConfig) {
        return SurveysApiFp(this.configuration).createDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction#survey-definition-api-tenets) definition or a specified survey format.
     * @summary Get Survey
     * @param {SurveysApiGetDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveysApiGenerated
     */
    public getDefinition(requestParameters: SurveysApiGetDefinitionRequest, options?: AxiosRequestConfig) {
        return SurveysApiFp(this.configuration).getDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction) metadata.
     * @summary Get Survey Metadata
     * @param {SurveysApiGetMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveysApiGenerated
     */
    public getMetadata(requestParameters: SurveysApiGetMetadataRequest, options?: AxiosRequestConfig) {
        return SurveysApiFp(this.configuration).getMetadata(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction).
     * @summary Delete Survey
     * @param {SurveysApiRemoveDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveysApiGenerated
     */
    public removeDefinition(requestParameters: SurveysApiRemoveDefinitionRequest, options?: AxiosRequestConfig) {
        return SurveysApiFp(this.configuration).removeDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update [survey](https://api.qualtrics.com/ZG9jOjg3NzY4Mg-survey-api-introduction) metadata.  <!-- theme: warning --> >### Date fields in this API use MySQL DateTime instead of ISO-8601.
     * @summary Update Metadata
     * @param {SurveysApiUpdateMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveysApiGenerated
     */
    public updateMetadata(requestParameters: SurveysApiUpdateMetadataRequest, options?: AxiosRequestConfig) {
        return SurveysApiFp(this.configuration).updateMetadata(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
