/* tslint:disable */
/* eslint-disable */
/*
Qualtrics Survey API

The Qualtrics Survey endpoints give you access to the structure of the surveys you create. 

Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints. 

Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ForbiddenRequestErrorResponse } from '../models';
// @ts-ignore
import { InternalServerErrorResponse } from '../models';
// @ts-ignore
import { InvalidRequestErrorResponse } from '../models';
// @ts-ignore
import { RequestSuccessfulResponse } from '../models';
// @ts-ignore
import { TranslationsResponse } from '../models';
// @ts-ignore
import { UnauthorizedRequestErrorResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SurveyTranslationsApi - axios parameter creator
 * @export
 */
export const SurveyTranslationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a list of all fields in a survey that can be [translated](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/translate-survey/) and their existing translations given a `surveyId` and `languageCode`. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). 
         * @summary Get Survey Translations JSON
         * @param {string} surveyId 
         * @param {string} languageCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySurveyIdAndLanguageCode: async (surveyId: string, languageCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('getBySurveyIdAndLanguageCode', 'surveyId', surveyId)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('getBySurveyIdAndLanguageCode', 'languageCode', languageCode)
            const localVarPath = `/surveys/{surveyId}/translations/{languageCode}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"languageCode"}}`, encodeURIComponent(String(languageCode !== undefined ? languageCode : `-languageCode-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/surveys/{surveyId}/translations/{languageCode}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a [survey translations](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/translate-survey/) for a given `surveyId` and `language code`. Must include existing translations. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). <!-- theme: info -->  >### Permissions >**Translate Surveys** permission must be enabled for the user to update survey languages.  
         * @summary Update Survey Translations
         * @param {string} surveyId 
         * @param {string} languageCode 
         * @param {{ [key: string]: string; }} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTranslations: async (surveyId: string, languageCode: string, requestBody?: { [key: string]: string; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('updateTranslations', 'surveyId', surveyId)
            // verify required parameter 'languageCode' is not null or undefined
            assertParamExists('updateTranslations', 'languageCode', languageCode)
            const localVarPath = `/surveys/{surveyId}/translations/{languageCode}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"languageCode"}}`, encodeURIComponent(String(languageCode !== undefined ? languageCode : `-languageCode-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/surveys/{surveyId}/translations/{languageCode}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SurveyTranslationsApi - functional programming interface
 * @export
 */
export const SurveyTranslationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SurveyTranslationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Return a list of all fields in a survey that can be [translated](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/translate-survey/) and their existing translations given a `surveyId` and `languageCode`. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). 
         * @summary Get Survey Translations JSON
         * @param {SurveyTranslationsApiGetBySurveyIdAndLanguageCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBySurveyIdAndLanguageCode(requestParameters: SurveyTranslationsApiGetBySurveyIdAndLanguageCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TranslationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBySurveyIdAndLanguageCode(requestParameters.surveyId, requestParameters.languageCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a [survey translations](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/translate-survey/) for a given `surveyId` and `language code`. Must include existing translations. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). <!-- theme: info -->  >### Permissions >**Translate Surveys** permission must be enabled for the user to update survey languages.  
         * @summary Update Survey Translations
         * @param {SurveyTranslationsApiUpdateTranslationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTranslations(requestParameters: SurveyTranslationsApiUpdateTranslationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestSuccessfulResponse>> {
            const requestBody: { [key: string]: string; } = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTranslations(requestParameters.surveyId, requestParameters.languageCode, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SurveyTranslationsApi - factory interface
 * @export
 */
export const SurveyTranslationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SurveyTranslationsApiFp(configuration)
    return {
        /**
         * Return a list of all fields in a survey that can be [translated](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/translate-survey/) and their existing translations given a `surveyId` and `languageCode`. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). 
         * @summary Get Survey Translations JSON
         * @param {SurveyTranslationsApiGetBySurveyIdAndLanguageCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBySurveyIdAndLanguageCode(requestParameters: SurveyTranslationsApiGetBySurveyIdAndLanguageCodeRequest, options?: AxiosRequestConfig): AxiosPromise<TranslationsResponse> {
            return localVarFp.getBySurveyIdAndLanguageCode(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [survey translations](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/translate-survey/) for a given `surveyId` and `language code`. Must include existing translations. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). <!-- theme: info -->  >### Permissions >**Translate Surveys** permission must be enabled for the user to update survey languages.  
         * @summary Update Survey Translations
         * @param {SurveyTranslationsApiUpdateTranslationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTranslations(requestParameters: SurveyTranslationsApiUpdateTranslationsRequest, options?: AxiosRequestConfig): AxiosPromise<RequestSuccessfulResponse> {
            return localVarFp.updateTranslations(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBySurveyIdAndLanguageCode operation in SurveyTranslationsApi.
 * @export
 * @interface SurveyTranslationsApiGetBySurveyIdAndLanguageCodeRequest
 */
export type SurveyTranslationsApiGetBySurveyIdAndLanguageCodeRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyTranslationsApiGetBySurveyIdAndLanguageCode
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyTranslationsApiGetBySurveyIdAndLanguageCode
    */
    readonly languageCode: string
    
}

/**
 * Request parameters for updateTranslations operation in SurveyTranslationsApi.
 * @export
 * @interface SurveyTranslationsApiUpdateTranslationsRequest
 */
export type SurveyTranslationsApiUpdateTranslationsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyTranslationsApiUpdateTranslations
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyTranslationsApiUpdateTranslations
    */
    readonly languageCode: string
    
} & { [key: string]: string; }

/**
 * SurveyTranslationsApiGenerated - object-oriented interface
 * @export
 * @class SurveyTranslationsApiGenerated
 * @extends {BaseAPI}
 */
export class SurveyTranslationsApiGenerated extends BaseAPI {
    /**
     * Return a list of all fields in a survey that can be [translated](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/translate-survey/) and their existing translations given a `surveyId` and `languageCode`. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). 
     * @summary Get Survey Translations JSON
     * @param {SurveyTranslationsApiGetBySurveyIdAndLanguageCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyTranslationsApiGenerated
     */
    public getBySurveyIdAndLanguageCode(requestParameters: SurveyTranslationsApiGetBySurveyIdAndLanguageCodeRequest, options?: AxiosRequestConfig) {
        return SurveyTranslationsApiFp(this.configuration).getBySurveyIdAndLanguageCode(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a [survey translations](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/translate-survey/) for a given `surveyId` and `language code`. Must include existing translations. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). <!-- theme: info -->  >### Permissions >**Translate Surveys** permission must be enabled for the user to update survey languages.  
     * @summary Update Survey Translations
     * @param {SurveyTranslationsApiUpdateTranslationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyTranslationsApiGenerated
     */
    public updateTranslations(requestParameters: SurveyTranslationsApiUpdateTranslationsRequest, options?: AxiosRequestConfig) {
        return SurveyTranslationsApiFp(this.configuration).updateTranslations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
