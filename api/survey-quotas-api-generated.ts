/* tslint:disable */
/* eslint-disable */
/*
Qualtrics Survey API

The Qualtrics Survey endpoints give you access to the structure of the surveys you create. 

Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints. 

Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateQuotaGroupResponse } from '../models';
// @ts-ignore
import { CreateQuotaResponse } from '../models';
// @ts-ignore
import { CrossLogicDefEntry } from '../models';
// @ts-ignore
import { EndSurveyOptions } from '../models';
// @ts-ignore
import { ForbiddenRequestErrorResponse } from '../models';
// @ts-ignore
import { GetQuotaGroupResponse } from '../models';
// @ts-ignore
import { GetQuotaGroupsResponse } from '../models';
// @ts-ignore
import { GetQuotaResponse } from '../models';
// @ts-ignore
import { GetQuotasResponse } from '../models';
// @ts-ignore
import { InternalServerErrorResponse } from '../models';
// @ts-ignore
import { InvalidRequestErrorResponse } from '../models';
// @ts-ignore
import { NotFoundErrorResponse } from '../models';
// @ts-ignore
import { Quota } from '../models';
// @ts-ignore
import { QuotaAction } from '../models';
// @ts-ignore
import { QuotaActionElement } from '../models';
// @ts-ignore
import { QuotaGroup } from '../models';
// @ts-ignore
import { QuotaLogic } from '../models';
// @ts-ignore
import { QuotaLogicType } from '../models';
// @ts-ignore
import { QuotaSchedule } from '../models';
// @ts-ignore
import { RequestSuccessfulResponse } from '../models';
// @ts-ignore
import { UnauthorizedRequestErrorResponse } from '../models';
// @ts-ignore
import { WebServiceOptions } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SurveyQuotasApi - axios parameter creator
 * @export
 */
export const SurveyQuotasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/).
         * @summary Create Quota
         * @param {string} surveyId 
         * @param {string} [quotaGroupId] 
         * @param {Quota} [quota] Create quota request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewQuota: async (surveyId: string, quotaGroupId?: string, quota?: Quota, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('createNewQuota', 'surveyId', surveyId)
            const localVarPath = `/survey-definitions/{surveyId}/quotas`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            if (quotaGroupId !== undefined) {
                localVarQueryParameter['quotaGroupId'] = quotaGroupId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: quota,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/quotas',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(quota, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group.
         * @summary Create Quota Group
         * @param {string} surveyId 
         * @param {QuotaGroup} [quotaGroup] Create quota group request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuotaGroup: async (surveyId: string, quotaGroup?: QuotaGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('createQuotaGroup', 'surveyId', surveyId)
            const localVarPath = `/survey-definitions/{surveyId}/quotagroups`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: quotaGroup,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/quotagroups',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(quotaGroup, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) from a survey.
         * @summary Delete Quota
         * @param {string} surveyId 
         * @param {string} quotaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuota: async (surveyId: string, quotaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('deleteQuota', 'surveyId', surveyId)
            // verify required parameter 'quotaId' is not null or undefined
            assertParamExists('deleteQuota', 'quotaId', quotaId)
            const localVarPath = `/survey-definitions/{surveyId}/quotas/{quotaId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"quotaId"}}`, encodeURIComponent(String(quotaId !== undefined ? quotaId : `-quotaId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/quotas/{quotaId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve all [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definitions for a survey.
         * @summary Get Quotas for Survey
         * @param {string} surveyId 
         * @param {number} [pageSize] 
         * @param {string} [skipToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (surveyId: string, pageSize?: number, skipToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('getAll', 'surveyId', surveyId)
            const localVarPath = `/survey-definitions/{surveyId}/quotas`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (skipToken !== undefined) {
                localVarQueryParameter['skipToken'] = skipToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/quotas',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definition.
         * @summary Get Quota for Survey
         * @param {string} surveyId 
         * @param {string} quotaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinition: async (surveyId: string, quotaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('getDefinition', 'surveyId', surveyId)
            // verify required parameter 'quotaId' is not null or undefined
            assertParamExists('getDefinition', 'quotaId', quotaId)
            const localVarPath = `/survey-definitions/{surveyId}/quotas/{quotaId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"quotaId"}}`, encodeURIComponent(String(quotaId !== undefined ? quotaId : `-quotaId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/quotas/{quotaId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definition.
         * @summary Get Quota Group for Survey
         * @param {string} surveyId 
         * @param {string} quotaGroupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuotaGroupDefinition: async (surveyId: string, quotaGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('getQuotaGroupDefinition', 'surveyId', surveyId)
            // verify required parameter 'quotaGroupId' is not null or undefined
            assertParamExists('getQuotaGroupDefinition', 'quotaGroupId', quotaGroupId)
            const localVarPath = `/survey-definitions/{surveyId}/quotagroups/{quotaGroupId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"quotaGroupId"}}`, encodeURIComponent(String(quotaGroupId !== undefined ? quotaGroupId : `-quotaGroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/quotagroups/{quotaGroupId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definitions for a survey.
         * @summary Get Quota Groups for Survey
         * @param {string} surveyId 
         * @param {number} [pageSize] 
         * @param {string} [skipToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuotaGroups: async (surveyId: string, pageSize?: number, skipToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('listQuotaGroups', 'surveyId', surveyId)
            const localVarPath = `/survey-definitions/{surveyId}/quotagroups`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (skipToken !== undefined) {
                localVarQueryParameter['skipToken'] = skipToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/quotagroups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group and all its quotas from a survey.
         * @summary Delete Quota Group
         * @param {string} surveyId 
         * @param {string} quotaGroupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeQuotaGroup: async (surveyId: string, quotaGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('removeQuotaGroup', 'surveyId', surveyId)
            // verify required parameter 'quotaGroupId' is not null or undefined
            assertParamExists('removeQuotaGroup', 'quotaGroupId', quotaGroupId)
            const localVarPath = `/survey-definitions/{surveyId}/quotagroups/{quotaGroupId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"quotaGroupId"}}`, encodeURIComponent(String(quotaGroupId !== undefined ? quotaGroupId : `-quotaGroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/quotagroups/{quotaGroupId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definition.
         * @summary Update Quota in the Given Survey
         * @param {string} surveyId 
         * @param {string} quotaId 
         * @param {Quota} [quota] Update quota request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinition: async (surveyId: string, quotaId: string, quota?: Quota, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('updateDefinition', 'surveyId', surveyId)
            // verify required parameter 'quotaId' is not null or undefined
            assertParamExists('updateDefinition', 'quotaId', quotaId)
            const localVarPath = `/survey-definitions/{surveyId}/quotas/{quotaId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"quotaId"}}`, encodeURIComponent(String(quotaId !== undefined ? quotaId : `-quotaId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: quota,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/quotas/{quotaId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(quota, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definition.
         * @summary Update Quota Group
         * @param {string} surveyId 
         * @param {string} quotaGroupId 
         * @param {QuotaGroup} [quotaGroup] Update quota group request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuotaGroupDefinition: async (surveyId: string, quotaGroupId: string, quotaGroup?: QuotaGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('updateQuotaGroupDefinition', 'surveyId', surveyId)
            // verify required parameter 'quotaGroupId' is not null or undefined
            assertParamExists('updateQuotaGroupDefinition', 'quotaGroupId', quotaGroupId)
            const localVarPath = `/survey-definitions/{surveyId}/quotagroups/{quotaGroupId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"quotaGroupId"}}`, encodeURIComponent(String(quotaGroupId !== undefined ? quotaGroupId : `-quotaGroupId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: quotaGroup,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/quotagroups/{quotaGroupId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(quotaGroup, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SurveyQuotasApi - functional programming interface
 * @export
 */
export const SurveyQuotasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SurveyQuotasApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/).
         * @summary Create Quota
         * @param {SurveyQuotasApiCreateNewQuotaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewQuota(requestParameters: SurveyQuotasApiCreateNewQuotaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateQuotaResponse>> {
            const quota: Quota = {
                Name: requestParameters.Name,
                Occurrences: requestParameters.Occurrences,
                Count: requestParameters.Count,
                CountForUndo: requestParameters.CountForUndo,
                Logic: requestParameters.Logic,
                LogicType: requestParameters.LogicType,
                QuotaAction: requestParameters.QuotaAction,
                ActionElement: requestParameters.ActionElement,
                ActionInfo: requestParameters.ActionInfo,
                ActionLogic: requestParameters.ActionLogic,
                ID: requestParameters.ID,
                QuotaRealm: requestParameters.QuotaRealm,
                QuotaSchedule: requestParameters.QuotaSchedule,
                EndSurveyOptions: requestParameters.EndSurveyOptions,
                WebServiceOptions: requestParameters.WebServiceOptions,
                CrossLogicDef: requestParameters.CrossLogicDef,
                PerformActionOnUser: requestParameters.PerformActionOnUser
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewQuota(requestParameters.surveyId, requestParameters.quotaGroupId, quota, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group.
         * @summary Create Quota Group
         * @param {SurveyQuotasApiCreateQuotaGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuotaGroup(requestParameters: SurveyQuotasApiCreateQuotaGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateQuotaGroupResponse>> {
            const quotaGroup: QuotaGroup = {
                ID: requestParameters.ID,
                Id: requestParameters.Id,
                MultipleMatch: requestParameters.MultipleMatch,
                Name: requestParameters.Name,
                Public: requestParameters.Public,
                Quotas: requestParameters.Quotas,
                Selected: requestParameters.Selected
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuotaGroup(requestParameters.surveyId, quotaGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) from a survey.
         * @summary Delete Quota
         * @param {SurveyQuotasApiDeleteQuotaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuota(requestParameters: SurveyQuotasApiDeleteQuotaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestSuccessfulResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuota(requestParameters.surveyId, requestParameters.quotaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve all [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definitions for a survey.
         * @summary Get Quotas for Survey
         * @param {SurveyQuotasApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: SurveyQuotasApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQuotasResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.surveyId, requestParameters.pageSize, requestParameters.skipToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a specific [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definition.
         * @summary Get Quota for Survey
         * @param {SurveyQuotasApiGetDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefinition(requestParameters: SurveyQuotasApiGetDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQuotaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefinition(requestParameters.surveyId, requestParameters.quotaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a specific [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definition.
         * @summary Get Quota Group for Survey
         * @param {SurveyQuotasApiGetQuotaGroupDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuotaGroupDefinition(requestParameters: SurveyQuotasApiGetQuotaGroupDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQuotaGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuotaGroupDefinition(requestParameters.surveyId, requestParameters.quotaGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a list of [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definitions for a survey.
         * @summary Get Quota Groups for Survey
         * @param {SurveyQuotasApiListQuotaGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listQuotaGroups(requestParameters: SurveyQuotasApiListQuotaGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetQuotaGroupsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listQuotaGroups(requestParameters.surveyId, requestParameters.pageSize, requestParameters.skipToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group and all its quotas from a survey.
         * @summary Delete Quota Group
         * @param {SurveyQuotasApiRemoveQuotaGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeQuotaGroup(requestParameters: SurveyQuotasApiRemoveQuotaGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestSuccessfulResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeQuotaGroup(requestParameters.surveyId, requestParameters.quotaGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definition.
         * @summary Update Quota in the Given Survey
         * @param {SurveyQuotasApiUpdateDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDefinition(requestParameters: SurveyQuotasApiUpdateDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestSuccessfulResponse>> {
            const quota: Quota = {
                Name: requestParameters.Name,
                Occurrences: requestParameters.Occurrences,
                Count: requestParameters.Count,
                CountForUndo: requestParameters.CountForUndo,
                Logic: requestParameters.Logic,
                LogicType: requestParameters.LogicType,
                QuotaAction: requestParameters.QuotaAction,
                ActionElement: requestParameters.ActionElement,
                ActionInfo: requestParameters.ActionInfo,
                ActionLogic: requestParameters.ActionLogic,
                ID: requestParameters.ID,
                QuotaRealm: requestParameters.QuotaRealm,
                QuotaSchedule: requestParameters.QuotaSchedule,
                EndSurveyOptions: requestParameters.EndSurveyOptions,
                WebServiceOptions: requestParameters.WebServiceOptions,
                CrossLogicDef: requestParameters.CrossLogicDef,
                PerformActionOnUser: requestParameters.PerformActionOnUser
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDefinition(requestParameters.surveyId, requestParameters.quotaId, quota, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definition.
         * @summary Update Quota Group
         * @param {SurveyQuotasApiUpdateQuotaGroupDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuotaGroupDefinition(requestParameters: SurveyQuotasApiUpdateQuotaGroupDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestSuccessfulResponse>> {
            const quotaGroup: QuotaGroup = {
                ID: requestParameters.ID,
                Id: requestParameters.Id,
                MultipleMatch: requestParameters.MultipleMatch,
                Name: requestParameters.Name,
                Public: requestParameters.Public,
                Quotas: requestParameters.Quotas,
                Selected: requestParameters.Selected
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuotaGroupDefinition(requestParameters.surveyId, requestParameters.quotaGroupId, quotaGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SurveyQuotasApi - factory interface
 * @export
 */
export const SurveyQuotasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SurveyQuotasApiFp(configuration)
    return {
        /**
         * Create a new [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/).
         * @summary Create Quota
         * @param {SurveyQuotasApiCreateNewQuotaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewQuota(requestParameters: SurveyQuotasApiCreateNewQuotaRequest, options?: AxiosRequestConfig): AxiosPromise<CreateQuotaResponse> {
            return localVarFp.createNewQuota(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group.
         * @summary Create Quota Group
         * @param {SurveyQuotasApiCreateQuotaGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuotaGroup(requestParameters: SurveyQuotasApiCreateQuotaGroupRequest, options?: AxiosRequestConfig): AxiosPromise<CreateQuotaGroupResponse> {
            return localVarFp.createQuotaGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) from a survey.
         * @summary Delete Quota
         * @param {SurveyQuotasApiDeleteQuotaRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuota(requestParameters: SurveyQuotasApiDeleteQuotaRequest, options?: AxiosRequestConfig): AxiosPromise<RequestSuccessfulResponse> {
            return localVarFp.deleteQuota(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve all [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definitions for a survey.
         * @summary Get Quotas for Survey
         * @param {SurveyQuotasApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: SurveyQuotasApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<GetQuotasResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definition.
         * @summary Get Quota for Survey
         * @param {SurveyQuotasApiGetDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinition(requestParameters: SurveyQuotasApiGetDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<GetQuotaResponse> {
            return localVarFp.getDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definition.
         * @summary Get Quota Group for Survey
         * @param {SurveyQuotasApiGetQuotaGroupDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuotaGroupDefinition(requestParameters: SurveyQuotasApiGetQuotaGroupDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<GetQuotaGroupResponse> {
            return localVarFp.getQuotaGroupDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definitions for a survey.
         * @summary Get Quota Groups for Survey
         * @param {SurveyQuotasApiListQuotaGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQuotaGroups(requestParameters: SurveyQuotasApiListQuotaGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<GetQuotaGroupsResponse> {
            return localVarFp.listQuotaGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group and all its quotas from a survey.
         * @summary Delete Quota Group
         * @param {SurveyQuotasApiRemoveQuotaGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeQuotaGroup(requestParameters: SurveyQuotasApiRemoveQuotaGroupRequest, options?: AxiosRequestConfig): AxiosPromise<RequestSuccessfulResponse> {
            return localVarFp.removeQuotaGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definition.
         * @summary Update Quota in the Given Survey
         * @param {SurveyQuotasApiUpdateDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDefinition(requestParameters: SurveyQuotasApiUpdateDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<RequestSuccessfulResponse> {
            return localVarFp.updateDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definition.
         * @summary Update Quota Group
         * @param {SurveyQuotasApiUpdateQuotaGroupDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuotaGroupDefinition(requestParameters: SurveyQuotasApiUpdateQuotaGroupDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<RequestSuccessfulResponse> {
            return localVarFp.updateQuotaGroupDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewQuota operation in SurveyQuotasApi.
 * @export
 * @interface SurveyQuotasApiCreateNewQuotaRequest
 */
export type SurveyQuotasApiCreateNewQuotaRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiCreateNewQuota
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiCreateNewQuota
    */
    readonly quotaGroupId?: string
    
} & Quota

/**
 * Request parameters for createQuotaGroup operation in SurveyQuotasApi.
 * @export
 * @interface SurveyQuotasApiCreateQuotaGroupRequest
 */
export type SurveyQuotasApiCreateQuotaGroupRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiCreateQuotaGroup
    */
    readonly surveyId: string
    
} & QuotaGroup

/**
 * Request parameters for deleteQuota operation in SurveyQuotasApi.
 * @export
 * @interface SurveyQuotasApiDeleteQuotaRequest
 */
export type SurveyQuotasApiDeleteQuotaRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiDeleteQuota
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiDeleteQuota
    */
    readonly quotaId: string
    
}

/**
 * Request parameters for getAll operation in SurveyQuotasApi.
 * @export
 * @interface SurveyQuotasApiGetAllRequest
 */
export type SurveyQuotasApiGetAllRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiGetAll
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {number}
    * @memberof SurveyQuotasApiGetAll
    */
    readonly pageSize?: number
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiGetAll
    */
    readonly skipToken?: string
    
}

/**
 * Request parameters for getDefinition operation in SurveyQuotasApi.
 * @export
 * @interface SurveyQuotasApiGetDefinitionRequest
 */
export type SurveyQuotasApiGetDefinitionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiGetDefinition
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiGetDefinition
    */
    readonly quotaId: string
    
}

/**
 * Request parameters for getQuotaGroupDefinition operation in SurveyQuotasApi.
 * @export
 * @interface SurveyQuotasApiGetQuotaGroupDefinitionRequest
 */
export type SurveyQuotasApiGetQuotaGroupDefinitionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiGetQuotaGroupDefinition
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiGetQuotaGroupDefinition
    */
    readonly quotaGroupId: string
    
}

/**
 * Request parameters for listQuotaGroups operation in SurveyQuotasApi.
 * @export
 * @interface SurveyQuotasApiListQuotaGroupsRequest
 */
export type SurveyQuotasApiListQuotaGroupsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiListQuotaGroups
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {number}
    * @memberof SurveyQuotasApiListQuotaGroups
    */
    readonly pageSize?: number
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiListQuotaGroups
    */
    readonly skipToken?: string
    
}

/**
 * Request parameters for removeQuotaGroup operation in SurveyQuotasApi.
 * @export
 * @interface SurveyQuotasApiRemoveQuotaGroupRequest
 */
export type SurveyQuotasApiRemoveQuotaGroupRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiRemoveQuotaGroup
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiRemoveQuotaGroup
    */
    readonly quotaGroupId: string
    
}

/**
 * Request parameters for updateDefinition operation in SurveyQuotasApi.
 * @export
 * @interface SurveyQuotasApiUpdateDefinitionRequest
 */
export type SurveyQuotasApiUpdateDefinitionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiUpdateDefinition
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiUpdateDefinition
    */
    readonly quotaId: string
    
} & Quota

/**
 * Request parameters for updateQuotaGroupDefinition operation in SurveyQuotasApi.
 * @export
 * @interface SurveyQuotasApiUpdateQuotaGroupDefinitionRequest
 */
export type SurveyQuotasApiUpdateQuotaGroupDefinitionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiUpdateQuotaGroupDefinition
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyQuotasApiUpdateQuotaGroupDefinition
    */
    readonly quotaGroupId: string
    
} & QuotaGroup

/**
 * SurveyQuotasApiGenerated - object-oriented interface
 * @export
 * @class SurveyQuotasApiGenerated
 * @extends {BaseAPI}
 */
export class SurveyQuotasApiGenerated extends BaseAPI {
    /**
     * Create a new [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/).
     * @summary Create Quota
     * @param {SurveyQuotasApiCreateNewQuotaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyQuotasApiGenerated
     */
    public createNewQuota(requestParameters: SurveyQuotasApiCreateNewQuotaRequest, options?: AxiosRequestConfig) {
        return SurveyQuotasApiFp(this.configuration).createNewQuota(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group.
     * @summary Create Quota Group
     * @param {SurveyQuotasApiCreateQuotaGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyQuotasApiGenerated
     */
    public createQuotaGroup(requestParameters: SurveyQuotasApiCreateQuotaGroupRequest, options?: AxiosRequestConfig) {
        return SurveyQuotasApiFp(this.configuration).createQuotaGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) from a survey.
     * @summary Delete Quota
     * @param {SurveyQuotasApiDeleteQuotaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyQuotasApiGenerated
     */
    public deleteQuota(requestParameters: SurveyQuotasApiDeleteQuotaRequest, options?: AxiosRequestConfig) {
        return SurveyQuotasApiFp(this.configuration).deleteQuota(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve all [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definitions for a survey.
     * @summary Get Quotas for Survey
     * @param {SurveyQuotasApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyQuotasApiGenerated
     */
    public getAll(requestParameters: SurveyQuotasApiGetAllRequest, options?: AxiosRequestConfig) {
        return SurveyQuotasApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definition.
     * @summary Get Quota for Survey
     * @param {SurveyQuotasApiGetDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyQuotasApiGenerated
     */
    public getDefinition(requestParameters: SurveyQuotasApiGetDefinitionRequest, options?: AxiosRequestConfig) {
        return SurveyQuotasApiFp(this.configuration).getDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definition.
     * @summary Get Quota Group for Survey
     * @param {SurveyQuotasApiGetQuotaGroupDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyQuotasApiGenerated
     */
    public getQuotaGroupDefinition(requestParameters: SurveyQuotasApiGetQuotaGroupDefinitionRequest, options?: AxiosRequestConfig) {
        return SurveyQuotasApiFp(this.configuration).getQuotaGroupDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definitions for a survey.
     * @summary Get Quota Groups for Survey
     * @param {SurveyQuotasApiListQuotaGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyQuotasApiGenerated
     */
    public listQuotaGroups(requestParameters: SurveyQuotasApiListQuotaGroupsRequest, options?: AxiosRequestConfig) {
        return SurveyQuotasApiFp(this.configuration).listQuotaGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group and all its quotas from a survey.
     * @summary Delete Quota Group
     * @param {SurveyQuotasApiRemoveQuotaGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyQuotasApiGenerated
     */
    public removeQuotaGroup(requestParameters: SurveyQuotasApiRemoveQuotaGroupRequest, options?: AxiosRequestConfig) {
        return SurveyQuotasApiFp(this.configuration).removeQuotaGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) definition.
     * @summary Update Quota in the Given Survey
     * @param {SurveyQuotasApiUpdateDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyQuotasApiGenerated
     */
    public updateDefinition(requestParameters: SurveyQuotasApiUpdateDefinitionRequest, options?: AxiosRequestConfig) {
        return SurveyQuotasApiFp(this.configuration).updateDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a [quota](https://www.qualtrics.com/support/survey-platform/survey-module/survey-tools/quotas/) group definition.
     * @summary Update Quota Group
     * @param {SurveyQuotasApiUpdateQuotaGroupDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyQuotasApiGenerated
     */
    public updateQuotaGroupDefinition(requestParameters: SurveyQuotasApiUpdateQuotaGroupDefinitionRequest, options?: AxiosRequestConfig) {
        return SurveyQuotasApiFp(this.configuration).updateQuotaGroupDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
