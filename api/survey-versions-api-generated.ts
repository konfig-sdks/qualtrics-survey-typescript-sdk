/* tslint:disable */
/* eslint-disable */
/*
Qualtrics Survey API

The Qualtrics Survey endpoints give you access to the structure of the surveys you create. 

Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints. 

Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateSurveyVersionRequest } from '../models';
// @ts-ignore
import { CreateSurveyVersionResponse } from '../models';
// @ts-ignore
import { ForbiddenRequestErrorResponse } from '../models';
// @ts-ignore
import { GetSurveyVersionResponse } from '../models';
// @ts-ignore
import { InternalServerErrorResponse } from '../models';
// @ts-ignore
import { InvalidRequestErrorResponse } from '../models';
// @ts-ignore
import { ListSurveyVersionsResponse } from '../models';
// @ts-ignore
import { NotFoundErrorResponse } from '../models';
// @ts-ignore
import { UnauthorizedRequestErrorResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SurveyVersionsApi - axios parameter creator
 * @export
 */
export const SurveyVersionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new [survey version](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/).
         * @summary Create Survey Version
         * @param {string} surveyId 
         * @param {CreateSurveyVersionRequest} [createSurveyVersionRequest] Create new survey version request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewVersion: async (surveyId: string, createSurveyVersionRequest?: CreateSurveyVersionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('createNewVersion', 'surveyId', surveyId)
            const localVarPath = `/survey-definitions/{surveyId}/versions`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createSurveyVersionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/versions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createSurveyVersionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a [survey version](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/) definition.
         * @summary Get Survey Version
         * @param {string} surveyId 
         * @param {string} versionId 
         * @param {'qsf'} [format] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinition: async (surveyId: string, versionId: string, format?: 'qsf', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('getDefinition', 'surveyId', surveyId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('getDefinition', 'versionId', versionId)
            const localVarPath = `/survey-definitions/{surveyId}/versions/{versionId}`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)))
                .replace(`{${"versionId"}}`, encodeURIComponent(String(versionId !== undefined ? versionId : `-versionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/versions/{versionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of all [versions of a survey](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/), including survey metadata.
         * @summary List Survey Versions
         * @param {string} surveyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (surveyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('list', 'surveyId', surveyId)
            const localVarPath = `/survey-definitions/{surveyId}/versions`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/survey-definitions/{surveyId}/versions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SurveyVersionsApi - functional programming interface
 * @export
 */
export const SurveyVersionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SurveyVersionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new [survey version](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/).
         * @summary Create Survey Version
         * @param {SurveyVersionsApiCreateNewVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewVersion(requestParameters: SurveyVersionsApiCreateNewVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateSurveyVersionResponse>> {
            const createSurveyVersionRequest: CreateSurveyVersionRequest = {
                Description: requestParameters.Description,
                Published: requestParameters.Published
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewVersion(requestParameters.surveyId, createSurveyVersionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a [survey version](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/) definition.
         * @summary Get Survey Version
         * @param {SurveyVersionsApiGetDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefinition(requestParameters: SurveyVersionsApiGetDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSurveyVersionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefinition(requestParameters.surveyId, requestParameters.versionId, requestParameters.format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a list of all [versions of a survey](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/), including survey metadata.
         * @summary List Survey Versions
         * @param {SurveyVersionsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: SurveyVersionsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSurveyVersionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.surveyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SurveyVersionsApi - factory interface
 * @export
 */
export const SurveyVersionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SurveyVersionsApiFp(configuration)
    return {
        /**
         * Create a new [survey version](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/).
         * @summary Create Survey Version
         * @param {SurveyVersionsApiCreateNewVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewVersion(requestParameters: SurveyVersionsApiCreateNewVersionRequest, options?: AxiosRequestConfig): AxiosPromise<CreateSurveyVersionResponse> {
            return localVarFp.createNewVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a [survey version](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/) definition.
         * @summary Get Survey Version
         * @param {SurveyVersionsApiGetDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefinition(requestParameters: SurveyVersionsApiGetDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<GetSurveyVersionResponse> {
            return localVarFp.getDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of all [versions of a survey](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/), including survey metadata.
         * @summary List Survey Versions
         * @param {SurveyVersionsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: SurveyVersionsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<ListSurveyVersionsResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewVersion operation in SurveyVersionsApi.
 * @export
 * @interface SurveyVersionsApiCreateNewVersionRequest
 */
export type SurveyVersionsApiCreateNewVersionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyVersionsApiCreateNewVersion
    */
    readonly surveyId: string
    
} & CreateSurveyVersionRequest

/**
 * Request parameters for getDefinition operation in SurveyVersionsApi.
 * @export
 * @interface SurveyVersionsApiGetDefinitionRequest
 */
export type SurveyVersionsApiGetDefinitionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyVersionsApiGetDefinition
    */
    readonly surveyId: string
    
    /**
    * 
    * @type {string}
    * @memberof SurveyVersionsApiGetDefinition
    */
    readonly versionId: string
    
    /**
    * 
    * @type {'qsf'}
    * @memberof SurveyVersionsApiGetDefinition
    */
    readonly format?: 'qsf'
    
}

/**
 * Request parameters for list operation in SurveyVersionsApi.
 * @export
 * @interface SurveyVersionsApiListRequest
 */
export type SurveyVersionsApiListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyVersionsApiList
    */
    readonly surveyId: string
    
}

/**
 * SurveyVersionsApiGenerated - object-oriented interface
 * @export
 * @class SurveyVersionsApiGenerated
 * @extends {BaseAPI}
 */
export class SurveyVersionsApiGenerated extends BaseAPI {
    /**
     * Create a new [survey version](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/).
     * @summary Create Survey Version
     * @param {SurveyVersionsApiCreateNewVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyVersionsApiGenerated
     */
    public createNewVersion(requestParameters: SurveyVersionsApiCreateNewVersionRequest, options?: AxiosRequestConfig) {
        return SurveyVersionsApiFp(this.configuration).createNewVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a [survey version](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/) definition.
     * @summary Get Survey Version
     * @param {SurveyVersionsApiGetDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyVersionsApiGenerated
     */
    public getDefinition(requestParameters: SurveyVersionsApiGetDefinitionRequest, options?: AxiosRequestConfig) {
        return SurveyVersionsApiFp(this.configuration).getDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of all [versions of a survey](https://www.qualtrics.com/support/survey-platform/survey-module/survey-publishing-versions/), including survey metadata.
     * @summary List Survey Versions
     * @param {SurveyVersionsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyVersionsApiGenerated
     */
    public list(requestParameters: SurveyVersionsApiListRequest, options?: AxiosRequestConfig) {
        return SurveyVersionsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
