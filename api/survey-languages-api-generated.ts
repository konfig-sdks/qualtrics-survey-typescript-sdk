/* tslint:disable */
/* eslint-disable */
/*
Qualtrics Survey API

The Qualtrics Survey endpoints give you access to the structure of the surveys you create. 

Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints. 

Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

The version of the OpenAPI document: 3.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ForbiddenRequestErrorResponse } from '../models';
// @ts-ignore
import { InternalServerErrorResponse } from '../models';
// @ts-ignore
import { InvalidRequestErrorResponse } from '../models';
// @ts-ignore
import { LanguagesResponse } from '../models';
// @ts-ignore
import { RequestSuccessfulResponse } from '../models';
// @ts-ignore
import { SurveyLanguages } from '../models';
// @ts-ignore
import { UnauthorizedRequestErrorResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SurveyLanguagesApi - axios parameter creator
 * @export
 */
export const SurveyLanguagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of available [languages](https://www.qualtrics.com/support/survey-platform/getting-started/languages-in-qualtrics/) for a survey given the `surveyId`.
         * @summary Get Languages
         * @param {string} surveyId The unique identifier of the survey.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableLanguages: async (surveyId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('getAvailableLanguages', 'surveyId', surveyId)
            const localVarPath = `/surveys/{surveyId}/languages`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["read:surveys"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/surveys/{surveyId}/languages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates enabled [languages](https://www.qualtrics.com/support/survey-platform/getting-started/languages-in-qualtrics/) given the `surveyId`. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). <!-- theme: info -->  >### Permissions >**Set Survey Options** permission must be enabled for the user to update survey languages.  
         * @summary Update Languages
         * @param {string} surveyId 
         * @param {{ [key: string]: any; }} [requestBody] All languages to be enabled for the survey. Must include existing languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnabledLanguages: async (surveyId: string, requestBody?: { [key: string]: any; }, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'surveyId' is not null or undefined
            assertParamExists('updateEnabledLanguages', 'surveyId', surveyId)
            const localVarPath = `/surveys/{surveyId}/languages`
                .replace(`{${"surveyId"}}`, encodeURIComponent(String(surveyId !== undefined ? surveyId : `-surveyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)
            // authentication public_oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "public_oauth2", ["write:surveys"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/surveys/{surveyId}/languages',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SurveyLanguagesApi - functional programming interface
 * @export
 */
export const SurveyLanguagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SurveyLanguagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of available [languages](https://www.qualtrics.com/support/survey-platform/getting-started/languages-in-qualtrics/) for a survey given the `surveyId`.
         * @summary Get Languages
         * @param {SurveyLanguagesApiGetAvailableLanguagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableLanguages(requestParameters: SurveyLanguagesApiGetAvailableLanguagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LanguagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableLanguages(requestParameters.surveyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates enabled [languages](https://www.qualtrics.com/support/survey-platform/getting-started/languages-in-qualtrics/) given the `surveyId`. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). <!-- theme: info -->  >### Permissions >**Set Survey Options** permission must be enabled for the user to update survey languages.  
         * @summary Update Languages
         * @param {SurveyLanguagesApiUpdateEnabledLanguagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnabledLanguages(requestParameters: SurveyLanguagesApiUpdateEnabledLanguagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestSuccessfulResponse>> {
            const requestBody: { [key: string]: any; } = {
                AvailableLanguages: requestParameters.AvailableLanguages
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEnabledLanguages(requestParameters.surveyId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SurveyLanguagesApi - factory interface
 * @export
 */
export const SurveyLanguagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SurveyLanguagesApiFp(configuration)
    return {
        /**
         * Returns a list of available [languages](https://www.qualtrics.com/support/survey-platform/getting-started/languages-in-qualtrics/) for a survey given the `surveyId`.
         * @summary Get Languages
         * @param {SurveyLanguagesApiGetAvailableLanguagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableLanguages(requestParameters: SurveyLanguagesApiGetAvailableLanguagesRequest, options?: AxiosRequestConfig): AxiosPromise<LanguagesResponse> {
            return localVarFp.getAvailableLanguages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates enabled [languages](https://www.qualtrics.com/support/survey-platform/getting-started/languages-in-qualtrics/) given the `surveyId`. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). <!-- theme: info -->  >### Permissions >**Set Survey Options** permission must be enabled for the user to update survey languages.  
         * @summary Update Languages
         * @param {SurveyLanguagesApiUpdateEnabledLanguagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnabledLanguages(requestParameters: SurveyLanguagesApiUpdateEnabledLanguagesRequest, options?: AxiosRequestConfig): AxiosPromise<RequestSuccessfulResponse> {
            return localVarFp.updateEnabledLanguages(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAvailableLanguages operation in SurveyLanguagesApi.
 * @export
 * @interface SurveyLanguagesApiGetAvailableLanguagesRequest
 */
export type SurveyLanguagesApiGetAvailableLanguagesRequest = {
    
    /**
    * The unique identifier of the survey.
    * @type {string}
    * @memberof SurveyLanguagesApiGetAvailableLanguages
    */
    readonly surveyId: string
    
}

/**
 * Request parameters for updateEnabledLanguages operation in SurveyLanguagesApi.
 * @export
 * @interface SurveyLanguagesApiUpdateEnabledLanguagesRequest
 */
export type SurveyLanguagesApiUpdateEnabledLanguagesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SurveyLanguagesApiUpdateEnabledLanguages
    */
    readonly surveyId: string
    
} & { [key: string]: any; }

/**
 * SurveyLanguagesApiGenerated - object-oriented interface
 * @export
 * @class SurveyLanguagesApiGenerated
 * @extends {BaseAPI}
 */
export class SurveyLanguagesApiGenerated extends BaseAPI {
    /**
     * Returns a list of available [languages](https://www.qualtrics.com/support/survey-platform/getting-started/languages-in-qualtrics/) for a survey given the `surveyId`.
     * @summary Get Languages
     * @param {SurveyLanguagesApiGetAvailableLanguagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyLanguagesApiGenerated
     */
    public getAvailableLanguages(requestParameters: SurveyLanguagesApiGetAvailableLanguagesRequest, options?: AxiosRequestConfig) {
        return SurveyLanguagesApiFp(this.configuration).getAvailableLanguages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates enabled [languages](https://www.qualtrics.com/support/survey-platform/getting-started/languages-in-qualtrics/) given the `surveyId`. <!--From Readme--> For more information about using the survey APIs, see [Managing Surveys](../../../../docs/Guides/Common%20Tasks/managing-surveys.md). <!-- theme: info -->  >### Permissions >**Set Survey Options** permission must be enabled for the user to update survey languages.  
     * @summary Update Languages
     * @param {SurveyLanguagesApiUpdateEnabledLanguagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SurveyLanguagesApiGenerated
     */
    public updateEnabledLanguages(requestParameters: SurveyLanguagesApiUpdateEnabledLanguagesRequest, options?: AxiosRequestConfig) {
        return SurveyLanguagesApiFp(this.configuration).updateEnabledLanguages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
